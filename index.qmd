---
title: "Where can we build missing middle housing in Chapel Hill, NC"
format: 
  html:
    title-block-banner: true
    toc: true
    toc-location: left
    toc-depth: 3
    html-math-method: katex
    code-fold: true
    code-summary: "show the code"
    code-overflow: wrap
    code-tools: true
    number-sections: true
    theme: 
      dark: slate
      light: flatly
    fig-width: 9
    fig-height: 6
editor: visual
---

## Introduction

Let's look at where we can build missing-middle housing in NC?

## Get some data

We need: Owner name and Structure type.

Let's pull in the Orange County parcel data, which tells us where parcels are and their area. It's available [here](ParcelsGDB.zip).

We also need the Orange County Address data, which has the year built, floor area. That's available [here](%22https://web.co.orange.nc.us/gisdownloads/addresses.zip%22).

Finally, we need the municipal boundaries to accurately capture which jurisdictions are relevant. That's available [here](%22https://web.co.orange.nc.us/gisdownloads/city.zip%22).

```{r, output=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(Hmisc)
library(mdbr)
library(knitr)
library(sf)
```

```{r, eval = FALSE}
download.file("https://web.co.orange.nc.us/gisdownloads/ParcelsGDB.zip", destfile = "ParcelsGDB.zip")
unzip("ParcelsGDB.zip")

download.file("https://web.co.orange.nc.us/gisdownloads/addresses.zip", destfile = "addresses.zip")
unzip("addresses.zip")

download.file("https://web.co.orange.nc.us/gisdownloads/city.zip", destfile = "city.zip")
unzip("city.zip")
```

## Read in the data!

And get only the Chapel Hill boundary.

```{r}
data <- read_mdb("ParcelsGDB.mdb", table="PARCELVIEW")
addr <- read_sf("addresses.shp")
city <- read_sf("city.shp")
ch <- city %>% filter(CITYCODE == "CH") %>% st_union() %>% st_as_sf()
```

## Summarise the data

First, we filter the addresses to only single family-type residences.

```{r, results="asis"}
addr <- addr %>% filter(LBCSSubCod < 1160 & LBCSSubCod >0) 
addr <- addr[ch,]
mapview::mapview(addr,zcol="LBCSDesc")
parcels <- sf::read_sf("All_Parcels.geojson")

duplex_footprint <- 2774

d <- right_join(parcels,st_drop_geometry(addr),by="PIN") %>% filter(LBCSDesc %in% c("Res-Single Family", "Res-MH-SW", "Res-MH-DW-TW")) %>% filter(OwnerAddress!="PROPERTY OFFICE UNC") %>% st_transform(2264) %>% st_make_valid() %>% mutate(area_acr = as.numeric(st_area(.)/43560), area_ft2 = as.numeric(st_area(.))) %>% filter(area_acr<5) %>% mutate(plexable = case_when(area_ft2>=4*duplex_footprint ~ "yes", TRUE ~ "no"))

```

We then filter to only parcels in CH

```{r}
data2 <- data %>% filter(PIN %in% d$PIN)

```

### How many people in each city own more than one house there?

OK first, how many **individual/non-corporate owners who live in the same city as their houses** own more than one house in each City in Orange County

```{r, results="asis"}
multi_owners <- d %>%
  group_by(owner_name, corp_owner, samecity_owner, in_state_owner, NAME) %>%
  filter(corp_owner == 0) %>%
  filter(samecity_owner == 1) %>%
  filter(NAME != "DURHAM") %>%
  summarise(owner_count = sum(parcel_count)) %>%
  mutate(owns_multiple = case_when(
    owner_count > 1 ~ "same-city individuals with more than one house",
    TRUE ~ "same-city indivudals with only one house")
  )

kable(table(multi_owners$NAME,multi_owners$owns_multiple))

```

### Aggregate home ownership by owner type

OK Now. Let's see how many **homes** in each city are owned by each of

a\) Same-city individuals with 1 house

b\) Same-city individuals with 2+ houses

c\) Non-local individuals with 1+ houses

d\) Corporations with 1+ houses

e\) government or universities or community home trust with 1+ houses

```{r, results="asis"}
ownership_by_type <- d %>%
  group_by(owner_name, corp_owner, samecity_owner, in_state_owner, NAME) %>%
  filter(NAME != "DURHAM") %>%
  summarise(owner_count = sum(parcel_count)) %>%
  mutate(owns_multiple = case_when(
    owner_count > 1 ~ "same-city individuals with more than one house",
    TRUE ~ "same-city indivudals with only one house")
  ) %>%
  mutate(
    owner_type = case_when(
      corp_owner == 0 & samecity_owner == 1 & owner_count ==1 ~ "a. same city individual with 1 house",
      corp_owner == 0 & samecity_owner == 1 & owner_count >1 ~  "b. same city individual with 2+ house",
      corp_owner == 0 & samecity_owner == 0 ~ "c. nonresident individual owner",
      corp_owner == 1 & !(grepl("UNIVERSITY",owner_name) | grepl("TOWN", owner_name) | grepl("CAROLINA", owner_name)| grepl("HOME TRUST", owner_name)| grepl("HABITAT", owner_name)) ~ "d. corp",
      corp_owner == 1 & (grepl("UNIVERSITY",owner_name)| grepl("TOWN", owner_name) | grepl("CAROLINA", owner_name)| grepl("HOME TRUST", owner_name) | grepl("HABITAT", owner_name)) ~ "e. university/govt/home trust"                    )
  ) %>%
  group_by(owner_type,NAME) %>%
  summarise(houses_owned = sum(owner_count)) %>% filter(!(NAME %in% c("Unincorporated")))

ggplot(ownership_by_type, aes(fill=owner_type, y= houses_owned, x=NAME)) +
  geom_bar(position="stack", stat="identity") + geom_text(aes(label=houses_owned), position = "stack")
```
